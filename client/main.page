
# @html defines the CoffeeKup function for parsing the HTML of the template.
@html = ->
  h1 "Welcome to houCe!"
  api_access = Data.apis.fb_access_token
  p class: "#{ifs api_access, 'old'}", "In houCe you can smell Coffee brewing everywhere.
    #{yield -> a target:'_blank', href:'http://nodejs.org/', 'Node.js'} + 
    #{yield -> a target:'_blank', href:'http://jashkenas.github.com/coffee-script/', 'CoffeeScript'} +
    #{yield -> a target:'_blank', href:'http://coffeekup.org/', 'CoffeeKup'}
    combination allows us to write everything in the same language
    #{yield -> span '.small', "(well, everything except stylesheets, but even
    that could change in the future with #{yield -> a target:'_blank', href:'https://github.com/aeosynth/ccss', 'CCSS'})"}."
  p class: "#{ifs api_access, 'old'}", "houCe is highly client oriented framework. Using same language
    everywhere allows us to make templates that have html, binding of events and even page controllers
    in the same file; with the principle of keeping related code as close to each other as possible."
  if not api_access
    p ->
      text "But enough of rambling, if you'd be so kind to "
      strong -> a '#connect_to_fb', href: '/', 'connect to facebook'
      text " we could populate some test data to dig in deeper."
  else
    text Utils.render 'after_logged_to_fb'


# @init function can be use to bind events to template after it has been rendered.
# $el parameter is the jQuery object of the parsed template, so bind everything into it.
@init = ($el)->
  $el.find('#connect_to_fb').click ->
    Utils.FB.connect()
    return false


# @page is the Page controller.
@page =
  # Each page has open event, that is executed when first part of the URL hash
  # (.../#!/page_name/...) equals to the name of the page.
  open: ->
    if Data.apis.fb_access_token?
      Models.person.get 'me', (me)->
        me.get_friends ->
          $('#page_content').render 'main'
    else
      $('#page_content').render 'main'

  # Pages can also define 'close' event, that gets executed when user leaves the page.
  # Close event needs to execute the callback, or othervise the new page is never opened.
  close: (cb)->
    cb() if confirm "Do you want to leave 'main' page?", 'yes', 'no'
